var io = require('socket.io-client');
var r = require('rethinkdb');
var db = require('../db');
var should = require('should');
var supertest = require('supertest');
var configTest = require('./configTest');
var authenticateAgent = require('./utils/authenticateAgent');
var resetDb = require('./utils/resetDb');

var utils = configTest.utils;
var serverAddress = configTest.serverAddress;

describe('authorization', function() {
  var agent;
  var token;
  var userId;
  before(function(done) {
    //wipe db, signup user, store token + user id, and initiate web socket connection with token
    resetDb(function() {
      authenticateAgent(function(token) {
        token = token;
        socket = io.connect(serverAddress, {query: 'token=' + token});
        done();
      });
    });
  });

  //wipe db
  after(function(done) {
    resetDb(function() {
      done();
    });
  });

  it('should receive an error when attempting to access a protected route', function(done) {
    socket.emit('getUrl', {url: '/users/test/'});
    socket.once('/users/test/-getUrlSuccess', function(data) {
      data.success.should.equal(false);
      done();
    });
  });

  it('should should pass when attempting to access an unprotected route', function(done) {
    socket.emit('getUrl', {url: '/'});
    socket.once('/-getUrlSuccess', function(data) {
      done();
    });
  });

  it('should successfully parse dynamic user tokens', function(done) {
    socket.emit('getUrl', {url: '/users/'});
    socket.once('/users/-getUrlSuccess', function(data) {
      data.success.should.equal(true);
      data.data.should.exist;
      done();
    });
  });

  it('should successfully parse wildcard paths generated by the database and dynamic data tokens', function(done) {
    socket.emit('getUrl', {url: '/users/' + userId + '/'});
    socket.once('/users/' + userId + '/-getUrlSuccess', function(data) {
      data.success.should.equal(true);
      done();
    });
  });

});